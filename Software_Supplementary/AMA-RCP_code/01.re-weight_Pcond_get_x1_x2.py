mport numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os,glob,re
from math import log,exp

file_A = 'pA_NAME_OF_XYZ_FILE.csv'#file generated by 00.get_Pcond_from_xyz_traj
file_B = 'pB_NAME_OF_XYZ_FILE.csv'

ratio=0.4 #you might wanna skip the initial 60% of trajectory 
xA=0.073 #the abundance of type A
xB=1-xA

#read in
df_A = pd.read_csv(file_A)
calc_A=df_A.T.tail(int(df_A.shape[1]*ratio))
a = pd.concat([calc_A.iloc[x,:] for x in np.arange(0,calc_A.shape[0],1)],axis=0).dropna()
a = pd.DataFrame(a,columns=['p'])
low_a=a[a['p']<xA]
high_a=a[a['p']>xA]

df_B = pd.read_csv(file_B)
calc_B=df_B.T.tail(int(df_B.shape[1]*ratio))
b = pd.concat([calc_B.iloc[x,:] for x in np.arange(0,calc_B.shape[0],1)],axis=0).dropna()
b = pd.DataFrame(b,columns=['p'])
low_b=b[b['p']<xB]
high_b=b[b['p']>xB]

#classify and rename
low_a=pd.DataFrame((1-low_a['p']).round(6).value_counts())
low_a.rename(columns = {'p': 'low_a'},inplace=True)
high_b=pd.DataFrame(high_b['p'].round(6).value_counts())
high_b.rename(columns = {'p': 'high_b'},inplace=True)
low_b=pd.DataFrame((1-low_b['p']).round(6).value_counts())
low_b.rename(columns = {'p': 'low_b'},inplace=True)
high_a=pd.DataFrame(high_a['p'].round(6).value_counts())
high_a.rename(columns = {'p': 'high_a'},inplace=True)    

#re-weight----------------------------------------
rich_b=pd.concat([low_a,high_b],axis=1)
rich_b['mul']=rich_b['low_a']*rich_b['high_b']
rich_b['sq']=rich_b['high_b']*rich_h['high_b']
rich_b=rich_b.fillna(0)
x1=rich_b['mul'].sum()/(rich_b['mul'].sum()+rich_b['sq'].sum())

rich_a=pd.concat([low_b,high_a],axis=1)
rich_a['mul']=rich_a['low_b']*rich_a['high_a']
rich_a['sq']=rich_a['high_a']*rich_a['high_a']
rich_a=rich_a.fillna(0)
x2=1-rich_a['mul'].sum()/(rich_a['mul'].sum()+rich_a['sq'].sum())
#---------------------------------------------------

print('the abundance of A in B-reich region:' + str(x1))
print('the abundance of A in A-reich region:' + str(x2))
